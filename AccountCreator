pragma solidity >=0.5.0 <0.6.0;

import "./ownable.sol";
import "./safemath.sol";

contract AccountCreator is Ownable {

  using SafeMath for uint256;
  using SafeMath32 for uint32;
  using SafeMath16 for uint16;
    
  struct Wallet {
    string Asset;
    uint Quantity;
  }
  
  struct Account {
    boolean student;
    Wallet wallet;
  }
  
  mapping (Account => Address) AccountToAddress;

  event accountCreated(uint _accountNum, boolean _student, Wallet _wallet);
  
  Account[] public Accounts;

  function _createAccount(boolean _verified) internal {
    Accounts.push(Account(_verified, Wallet("Credit for one free response", 5)));
    AccountToAddress[Accounts[Accounts.length - 1]] = msg.sender;
    emit accountCreated(Accounts.length - 1, Accounts[Accounts.length - 1].student, Accounts[Accounts.length - 1].Wallet);
  }
}
