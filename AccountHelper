pragma solidity >=0.5.0 <0.6.0;

import "./BountyCreator.sol";

contract AccountHelper is Account {

  event verifiedAccount(uint accountNum, boolean value);
  event linkedAccount(uint accountNum, boolean value);
  event transferSuccess(uint accountNum, boolean value);
  event withdrawSuccess(uint accountNum, boolean value);
  
  mapping (uint => address) public accountOwner; 

  modifier validAccount(uint _accountNum) {
    require((_accountNum > 0) && (_accountNum < Accounts.length));
    _;
  }

  modifier verifiedAccount(uint _accountNum) {
      require(Accounts[_accountNum].student);
      _;
  }
  
  modifier linkedMetaMask() {
      require();
      _;
  }
  
  modifier linkedAccount(uint _accountNum) {
      require(linkedMetaMask());
      _;
  }
  
  modifier isOwner(uint _accountNum) {
      require(keccak256(abi.encodePacked(msg.sender)) == keccak256(abi.encodePacked(accountOwner(_accountNum))));
      _;
  }
  
  modifier sufficientBalance(uint _accountNum, string _asset, uint _quantity) {
    require(validAccount(_accountNum));
    boolean sufficient = False;
    for (uint a = 0; a < Accounts[_accountNum].Wallet.length; a++) {
      if (keccak256(abi.encodePacked(Accounts[_accountNum].Wallet[a].Asset)) == keccak256(abi.encodePacked(_asset))) {
        sufficient = True;
        break;
      }
    }
    emit sufficientBalance(_accountNum, _asset, _quantity, sufficient);
    require(sufficient);
    _;
  }
    
  function verifyAccount(string _email) {
  // check if _email contains ".edu"
  // create code for that email
  // send code to email
  // have student enter code on website
  // check whose email that code matches
  // createAccount( check whether code matches )
  // emit event
  }
  
  function linkAccount(uint _accountNum) {
    accountOwner[_accountNum] = /Metamask Address;
    emit linkedAccount(_accountNum, True);
  }
  
  function transfer(uint _accountNum, address receiver, string asset, uint quantity) verifiedAccount(_accountNum) sufficientBalance(_accountNum, _asset, _quantity) {
    // send assets to receiver
    // emit transferSuccess event
  }
  
  function withdraw(uint _accountNum, string asset, uint quantity) isOwner(_accountNum) linkedAccount(_accountNum) sufficientBalance(_accountNum, _asset, _quantity) {
    //send assets to Metamask wallet
    // emit withdrawSuccess event
  }

}
