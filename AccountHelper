pragma solidity >=0.5.0 <0.6.0;

import "./BountyCreator.sol";

contract AccountHelper is Account {

  event winningResponse(uint _bountyNum, uint _responseNum);
  event responseCreated(uint _bountyNum, uint _responseNum);

  modifier onlyOwnerOf(uint _bountyNum) {
      require(msg.sender == Bounties[_bountyNum].sponsor);
      _;
  }
    
  function respond(uint _bountyNum, string _response) external {
    Vote[] initVotes = [];
    Response response = Response(msg.sender, _response, initVotes);
    Bounties[_bountyNum].responses.push(response);
    emit responseCreated(_bountyNum, Bounties[_bountyNum].responses.length - 1);
  }
  
  function closeBounty(uint _bountyNum) private {
    uint totalVotes = 0;
    uint winningVotes = 0;
    uint winningResponse = 0;
    
    for (uint r = 0; r < Bounties[_bountyNum].responses.length; r++) {
      uint currentVotes = 0;
      for (uint v = 0; v < Bounties[_bountyNum].responses[r].votes.length; v++) {
        currentVotes = currentVotes + Bounties[_bountyNum].responses[r].votes[v].numVotes;
      }
      if (currentVotes > winningVotes) {
        winningVotes = currentVotes;
        winningResponse = r;
      }
      totalVotes = totalVotes + currentVotes;
    }
    
    emit winningResponse(_bountyNum, winningResponse);
    
    //send bounty_amount bounty_asset to Bounties[_bountyNum].responses[r].responder
    
    for (uint v = 0; v < Bounties[_bountyNum].responses[winningResponse].votes.length; v++) {
      // send (totalVotes - winningVotes) * Bounties[_bountyNum].responses[winningResponse].votes[v].numVotes / winningVotes;
    }
  }

}
