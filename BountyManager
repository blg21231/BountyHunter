pragma solidity >=0.5.0 <0.6.0;

import "./BountyCreator.sol";

contract BountyManager is BountyCreator {

  event winningResponse(uint _bountyNum, uint _responseNum);

  modifier onlyOwnerOf(uint _bountyNum) {
      require(msg.sender == Bounties[_bountyNum].sponsor);
      _;
  }
  
  function closeBounty(uint _bountyNum) private {
    int[] votes;
    for (uint r = 0; r < Bounties.length; r++) {
      uint currentVotes = 0;
      for (uint v = 0; v < Bounties[_bountyNum].responses.length; v++) {
        currentVotes = currentVotes + Bounties[_bountyNum].responses
      }
    }
    for (uint i = 0; i < zombies.length; i++) {
      if (zombieToOwner[i] == _owner) {
        result[counter] = i;
        counter++;
      }
  
  }

}
